##
## MBSL Xilinx Makefile
##

SHELL := /bin/bash

# Xilinx version
XIL_VERSION  ?= 13.2
XIL_ARCH     ?= 64
XIL_HOME     ?= /opt/Xilinx/$(XIL_VERSION)/ISE_DS

# path to ISE/settings{32,64}.sh
XIL_ISE_ENV  ?= $(XIL_HOME)/settings$(XIL_ARCH).sh
# environment setup command
XIL_SETUP     = source $(XIL_ISE_ENV)

# common options given to Xilinx tools
XIL_OPTS     ?=

# options passed to bitgen
BITINIT_OPTS ?=
BITINIT_OPTS += $(XIL_OPTS)

# options passed to libgen
LIBGEN_OPTS  ?=
LIBGEN_OPTS  += $(XIL_OPTS)

# selected design to download
DESIGN       ?= default
# full path to design file
DESIGN_FILE  := $(DESIGN_PATH)/$(DESIGN).bit
# full path to selected DTS file
DTS_FILE     := $(DTS_PATH)/$(DTS).dts
# ELF file of bootloader
BOOTLDR_ELF  ?=
BOOTLDR_BMM  ?= $(DESIGN_PATH)/system_bd.bmm
ORIG_BITSTREAM ?= $(DESIGN_PATH)/system.bit

# JTAG number of FPGA device
FPGA_JTAG    ?= 1

#################

xmd-dow-run  = $(XIL_SETUP) && ls -lh $(1) && xmd <<< "connect mb mdm; dow $(1); run"
impact-batch = $(XIL_SETUP) && impact -batch $(1)

boot-image: boot-by-xmd
boot-by-xmd: $(MBSL_IMAGE)
	$(Q) $(call xmd-dow-run,$<)

boot-design: boot-by-impact
boot-by-impact: $(DESIGN_FILE) download.cmd
	$(Q) $(call impact-batch,download.cmd)

ifneq ($(BOOTLDR_ELF),)
$(DESIGN_FILE): $(ORIG_BITSTREAM) $(BOOTLDR_ELF)
	$(Q) $(XIL_SETUP) && bitinit               \
	 	-bt "$(ORIG_BITSTREAM)"                 \
		-o  "$(DESIGN_FILE)"                    \
		-pe "$(FPGA_PROC_ID)" "$(BOOTLDR_ELF)"  \
		-bm "$(BOOTLDR_BMM)"                    \
		$(BITINIT_OPTS)                         \
		-p  "$(FPGA_TYPE)" "$(MHS_FILE)"
else
	 $(info No bootloader is used)
endif

xilinx-cleanlock: cleanlock.cmd
	$(Q) $(call impact-batch,$<)

cleanlock.cmd: force
	$(Q) echo "cleancablelock"    > $@
	$(Q) echo "quit"             >> $@

download.cmd: force
	$(Q) echo "setMode -bscan"    > $@
	$(Q) echo "setCable -p auto" >> $@
	$(Q) echo "identify"         >> $@
	$(Q) echo "identifympm"      >> $@
	$(Q) echo "assignfile -p $(FPGA_JTAG) -file $(DESIGN_FILE)" >> $@
	$(Q) echo "program -p $(FPGA_JTAG)" >> $@
	$(Q) echo "quit"             >> $@


#################
 
DTS_NEW      ?= new
DTS_NEW_FILE := $(DTS_PATH)/$(DTS_NEW).dts
DTS_TMP_PATH ?= $(TMP_PATH)/.dts

MHS_DIR      ?= $(DESIGN_DIR)
MSS_DIR      ?= $(DESIGN_DIR)
MHS_PATH     := $(MBSL_HOME)/$(MHS_DIR)
MSS_PATH     := $(MBSL_HOME)/$(MSS_DIR)
MHS_NAME     ?= $(DESIGN)
MSS_NAME     ?= $(DESIGN)
MHS_FILE     ?= $(MHS_PATH)/$(MHS_NAME).mhs
MSS_FILE     ?= $(MSS_PATH)/$(MSS_NAME).mss

DEVTREE_PATH  = $($(DEVTREE_ID)_PATH)
DEVTREE_LIB_PATH = $(DEVTREE_PATH)/..
DEVTREE_DTS   = $($(DEVTREE_ID)_DTS)
FPGA_PROC_ID ?= microblaze_0
FPGA_TYPE    ?= xc3s1600efg320-4

# generates linux MSS file from standalone MSS file
mss-linux-gen = awk -v LOG=1 -f $(UTIL_PATH)/standalone2linux.awk $(1) > $(2);

# Absolute path to the source standalone MSS.
# If empty no generation will occure.
# If specified and MSS_FILE doesn't exit, it is
# used to generate it.
MSS_SALONE   ?=

# automatic linux MSS generation from standalone MSS
ifneq ($(MSS_SALONE),)
$(MSS_FILE): $(MSS_SALONE)
	$(Q) $(call mss-linux-gen,$<,$@)
endif

dts-generate: $(DTS_NEW_FILE)
$(DTS_PATH):
	$(Q) mkdir -p $(DTS_PATH)
$(DTS_NEW_FILE): $(MHS_FILE) $(MSS_FILE) $(DTS_PATH)
	$(Q) if [ -z "$(DEVTREE_ID)" ]; then                  \
	       echo "No DEVTREE_ID is defined" > /dev/stderr; \
	       exit 1;                                        \
             fi
	$(Q) if [ -z "$(DEVTREE_DTS)" ]; then                      \
	       echo "No <DEVTREE_ID>_DTS is defined" > /dev/stderr \
	       exit 1;                                             \
	     fi
	$(Q) $(XIL_SETUP) && LIBGEN_OPTS="$(LIBGEN_OPTS)"                   \
	                $(UTIL_PATH)/gen-dts.sh                             \
	                   "$(DTS_TMP_PATH)" "$(DEVTREE_LIB_PATH)"          \
	                   "$(FPGA_PROC_ID)" "$(MHS_FILE)"                  \
	                   "$(MSS_FILE)"     "$(FPGA_TYPE)"                 \
	                   "$(DTS_TMP_PATH)/$(FPGA_PROC_ID)/$(DEVTREE_DTS)" \
	                   "$(DTS_NEW_FILE)"
	
#################

help-xilinx:
	@echo "Xilinx:"
	@echo "  dts-generate           ... Generates DTS file named <DTS_NEW> using MHS and MSS files"
	@echo "  xilinx-cleanlock       ... Tries to clean lock of the cable"
	@echo "  DTS_NEW                ... Variable that holds the name of generated DTS file"
	@echo "  MHS_DIR                ... Where to look for MHS files, default: <DESIGN_DIR>"
	@echo "  MSS_DIR                ... Where to look for MSS files, default: <DESIGN_DIR>"
	@echo "  MHS_NAME               ... Base name of MHS file, default: <DESIGN>"
	@echo "  MSS_NAME               ... Base name of MSS file, default: <DESIGN>"
	@echo "  MSS_SALONE             ... Path to standalone MSS (linux <MSS_FILE> can be automatically generated from that)"
	@echo "  FPGA_TYPE              ... Target FPGA that is used"
	@echo "  FPGA_PROC_ID           ... ID of target processor (in FPGA)"
	@echo "  FPGA_JTAG              ... Position of target FPGA in the JTAG chain, default: 1"
	@echo "  XIL_VERSION            ... Version of Xilinx ISE"
	@echo "  XIL_ISE_ENV            ... Path to settings script of ISE"
	@echo "  XIL_ARCH               ... Architecture of settings script (64|32)"
	@echo "  XIL_HOME               ... path to ISE_DS directory (XIL_VERSION wouldn't be used then)"
	@echo "  XIL_OPTS               ... additional options to be set when calling Xilinx tools"
	@echo "  BITINIT_OPTS           ... additional options to be set when calling bitinit"
	@echo "  LIBGEN_OPTS            ... additional options to be set when calling libgen"
	@echo "  BOOTLDR_ELF            ... path to ELF file that can be loaded into BlockRAMs (a bootloader)"
	@echo "  BOOTLDR_BMM            ... path to bmm file of the design, default: <DESIGN_PATH>/system_bd.bmm"

#################

clean-xilinx:
	$(Q) $(RM) _impactbatch.log download.cmd
	$(Q) rm -Rf __xps $(DESIGN_PATH)/data psf2Edward.log
	$(Q) rm -Rf $(DTS_TMP_PATH)

clean-fini: clean-xilinx
distclean-fini: clean-xilinx
help-addon: help-xilinx
