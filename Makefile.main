#
# Most general things
#

download-init:
	@mkdir -p $(SW_SRC)
patch-init:
configure-init:
install-init:
build-init: prepare-dts
	@mkdir -p $(INITRAMFS_DIR)
clean-init:
distclean-init:

KSRC       := $(SRC-kernel-$(KERNEL))
BBSRC      := $(SRC-busybox)
TOOLS_PATH := $(foreach t,$(TOOLS),$(PATH-$(t)):)

BUILD_SRC     = $($(@:build-%=SRC-%))
INSTALL_SRC   = $($(@:install-%=SRC-%))
CONFIGURE_SRC = $($(@:configure-%=SRC-%))
DOWNLOAD_SRC  = $($(@:download-%=SRC-%))
PATCH_SRC     = $($(@:patch-%=SRC-%))
CLEAN_SRC     = $($(@:clean-%=SRC-%))
DISTCLEAN_SRC = $($(@:distclean-%=SRC-%))

$(KERNEL_CONFIG_FILES:%.kconfig=kconfig_%):
	$(Q) if [ -f "$(KSRC)/.config" ]; then            \
		cp "$(KSRC)/.config" "$(KSRC)/.config.bak";    \
	fi;                                               \
	cp $(CONFIGS_DIR)/$(@:kconfig_%=%.kconfig) $(KSRC)/.config

$(BUSYBOX_CONFIG_FILES:%.bbconfig=bbconfig_%):
	$(Q) if [ -f "$(BBSRC)/.config" ]; then                \
		cp "$(BBSRC)/.config" "$(SRC-busybox)/.config.bak"; \
	fi;                                                    \
	cp $(CONFIGS_DIR)/$(@:bbconfig_%=%.bbconfig) $(BBSRC)/.config    

DTS_FILE     = $(DTS_DIR)/$(DTS)

prepare-dts: $(DTS_FILE)
	$(Q) echo "==== $(DTS_FILE) ===="
	$(Q) cp $(DTS_FILE) $(KSRC)/arch/microblaze/boot/dts/

copy-system.map: $(KSRC)/vmlinux.o
	$(Q) cp $(KSRC)/System.map $(INITRAMFS_DIR)

build-kernel: $(KSRC)/vmlinux.o
install-kernel: install-kernel-$(KERNEL)
copy-kernel: KIMG=simpleImage.$(DTS:%.dts=%)
copy-kernel:
	$(Q) cp $(KSRC)/arch/microblaze/boot/$(KIMG) image-$(KERNEL)
	$(Q) ls -lh image-$(KERNEL)

.NOTPARALLEL: copy-system.map build-kernel install-kernel copy-kernel

#
###############################
#
## generates targets: get-<tool>
#GET_T  := $(foreach t,$(TOOLS),$(HOME-$(t)))
## generates targets: get-<package>
#GET_P  := $(foreach p,$(PKGS),$(SRC-$(p)))
#GET_K  := $(KSRC)
#
#download-prepare:
#	mkdir -p $(SW_SRC)
#	mkdir -p $(TOOLS_DIR)
#
#download-tools: $(GET_T)
#download-pkgs: $(GET_P)
#download-kernel: $(GET_K)
#
###############################
#
## expands to current project src dir
#CONFIGURE_SRC = $($(@:configure-%=SRC-%))
#
#CONFIGURE_P  := $(foreach p,$(PKGS),configure-$(p))
#configure-software: $(CONFIGURE_P)
#configure-kernel: configure-kernel-$(KERNEL)
#
###############################
#
## expands to current project src dir
#BUILD_SRC    = $($(@:build-%=SRC-%))
#INSTALL_SRC  = $($(@:install-%=SRC-%))
#
#BUILD_P     := $(foreach p,$(PKGS),pre-build-$(p) build-$(p) post-build-$(p))
#PREBUILD_P  := $(foreach p,$(PKGS),pre-build-$(p))
#POSTBUILD_P := $(foreach p,$(PKGS),post-build-$(p))
#
#INSTALL_P   := $(foreach p,$(PKGS),install-$(p))
#DTS_FILE     = $(DTS_DIR)/$(DTS)
#
#build-image: prepare-initramfs build-software install-software \
#		       prepare-dts build-kernel copy-image
#.NOTPARALLEL: prepare-dts build-kernel copy-image
#
#build-software: $(BUILD_P)
#$(PREBUILD_P):
#$(POSTBUILD_P):
#
#build-kernel: build-kernel-$(KERNEL)
#prepare-initramfs: $(INITRAMFS_DIR)
#install-software: $(INSTALL_P)
#prepare-dts: $(DTS_FILE)
#	$(Q) echo "==== $(DTS_FILE) ===="
#	$(Q) cp $(DTS_FILE) $(KSRC)/arch/microblaze/boot/dts/
#copy-image: image-$(KERNEL)
#
#$(INITRAMFS_DIR):
#	$(Q) mkdir -p $(INITRAMFS_DIR)
#
#image-$(KERNEL): $(KSRC)/arch/microblaze/boot/simpleImage.$(DTS:%.dts=%)
#	$(Q) echo "==== Image: image-$(KERNEL) ===="
#	$(Q) cp $< $@
#	$(Q) ls -lh $@
#
## Egg-chicken problem, System.map is generated after kernel compilation,
## but initramfs is generated before kernel compilation.
## Eg. add this after build-kernel in the command line of make. And
## then run build-kernel again.
#kernel-with-system.map: $(INITRAMFS_DIR)/System.map build-kernel
#$(INITRAMFS_DIR)/System.map: $(KSRC)/System.map
#	cp $(KSRC)/System.map $(INITRAMFS_DIR)
#
###############################
#
#HW_DESIGN_FILE = $(HW_DESIGN_DIR)/$(HW_DESIGN).bit
#
#boot-design: download-design
#boot-image: image-$(KERNEL) boot-xmd
#.NOTPARALLEL: boot-image
#
###############################
#
###############################
#
## expands to current project src dir
#PATCH_SRC  = $($(@:patch-%=SRC-%))
#
#PATCH_P   := $(foreach p,$(PKGS),patch-$(p))
#PATCH_K   := patch-kernel-$(KERNEL)
#PATCH_T   := $(foreach t,$(TOOLS),patch-$(t))
#
#patch-software: $(PATCH_P)
#patch-tools: $(PATCH_T)
#patch-kernel: $(PATCH_K)
#
###############################
#
#CLEAN_SRC     = $($(@:clean-%=SRC-%))
#DISTCLEAN_SRC = $($(@:distclean-%=SRC-%))
#
#CLEAN_P      := $(foreach p,$(PKGS),clean-$(p))
#DISTCLEAN_P  := $(foreach p,$(PKGS),distclean-$(p))
#CLEAN_K      := clean-kernel-$(KERNEL)
#DISTCLEAN_K  := distclean-kernel-$(KERNEL)
#
#clean-pkgs: $(CLEAN_P)
#distclean-pkgs: $(DISTCLEAN_P)
#clean-kernel: $(CLEAN_K)
#distclean-kernel: $(DISTCLEAN_K)
#	rm -Rf $(INITRAMFS_DIR)
#
###############################
#
#save-current-kconfig: $(KSRC)/.config
#	$(Q) if [ -f "config/$(KCONFIG_OUTPUT)" ]; then            \
#		echo -n "There is already a config/$(KCONFIG_OUTPUT)";  \
#		echo "file, please move it or delete it or something";  \
#	else                                                       \
#		cp $(KSRC)/.config config/$(KCONFIG_OUTPUT);            \
#		ls -l config/$(KCONFIG_OUTPUT);                         \
#	fi
#
